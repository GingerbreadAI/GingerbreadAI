## Code Overview

This project consists of several key components that work together to provide the **GINGERBREAD AI Token** functionality. Below is a breakdown of the important sections of the code:

### 1. **Smart Contract & Token Interaction**
The core functionality of the **GINGERBREAD AI Token** relies on interacting with the **Solana blockchain**. The smart contract allows users to burn their custom tokens and be rewarded with a percentage of tokens held in the developer's wallet.

- **Burn and Reward Logic**: The `burn_token` function handles the process of burning the user's tokens and rewarding them with a percentage of the developer’s token balance.
- **Solana API**: We use Solana's API to perform blockchain operations such as token burns and token transfers. The API ensures that token transfers happen securely and efficiently.

### 2. **Burn and Reward Function (`burn_token`)**
The `burn_token` function is responsible for executing the burn and reward process:

- **User Token Burn**: The user specifies how many tokens they want to burn from their wallet. This is done by interacting with the Solana blockchain using the Solana API.
- **Developer Wallet Token Reward**: Once the tokens are burned, the function queries the developer’s wallet to determine how many reward tokens are available, calculates the reward (based on a specified percentage), and transfers the calculated reward tokens to the user's wallet.
  
This function allows the user to essentially "trade" their tokens for a percentage of another token (held by the developer) as a reward for their action.

### 3. **Configuration Files**
- **`settings.json`**: The configuration file where the user specifies their Solana API key, the developer’s wallet address, and the reward token address. This is required to interact with the blockchain.
- **`config.json`**: Contains other settings such as the reward percentage and other optional customizations for your GINGERBREAD AI experience.

### 4. **AI Integration (Optional)**
The AI agent is an optional feature that can interact with users, explain the tokenomics, and guide them through the burning process in a fun, conversational manner. You can customize the behavior of the AI to fit your branding and user engagement strategies.

- **AI Interaction**: The AI agent can be programmed to provide personalized responses and guide users through the token burning process.
- **AI Personality**: Customizable AI personality and tasks (like greeting the user, telling stories, etc.) are defined in the `config.json`.

### 5. **Developer Wallet Interaction**
This part of the code ensures that a percentage of the **developer's** tokens are used as a reward for users burning their own custom tokens. The developer wallet address is securely specified in the `settings.json`, and it is used for reward distribution when users burn their tokens.

### 6. **Utilities**
- **`utils.py`**: This file contains helper functions for loading and saving JSON data, including functions to load user-specific settings and configuration files.
- **`log_interaction`**: A logging function to track important events and interactions, such as successful burns or token transfers, which are useful for debugging and transparency.

### 7. **Token Burn and Reward Example Code**
In the main application logic, you would typically use the `burn_token` function as follows:

```python
response = burn_token(
    user_address="USER_WALLET_ADDRESS",
    token_amount=100,
    reward_percentage=10,
    reward_token_address="GINGERBREAD_TOKEN_ADDRESS",
    developer_wallet="DEVELOPER_WALLET_ADDRESS",
    solana_api_key="YOUR_SOLANA_API_KEY"
)

print(response)
